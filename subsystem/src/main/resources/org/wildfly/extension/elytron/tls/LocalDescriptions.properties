#
# Copyright 2022 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

elytron-tls=Elytron based subsystem for providing basic SSL/TLS features
# Operations
elytron-tls.add=Adds the Elytron TLS subsystem
elytron-tls.remove=Removes the Elytron TLS subsystem
# Attributes
elytron-tls.initial-providers=Reference to the Providers that should be registered ahead of all existing Providers.
elytron-tls.final-providers=Reference to the Providers that should be registered after all existing Providers.
elytron-tls.disallowed-providers=A list of providers that are not allowed, and will be removed from the providers list.
elytron-tls.default-ssl-context=Reference to the SSLContext which should be globally registered as the default.


#####################################
# Security Properties and Providers #
#####################################

elytron-tls.security-properties=Security properties to be set.

elytron-tls.aggregate-providers=An aggregation of two or more Provider[] resources.
# Operations
elytron-tls.aggregate-providers.add=The add operation for the aggregated providers resource
elytron-tls.aggregate-providers.remove=The remove operation for the aggregated providers resource
# Attributes
elytron-tls.aggregate-providers.providers=The referenced Provider[] resources to aggregate.

elytron-tls.provider-loader=A definition for a Provider loader.
# Operations
elytron-tls.provider-loader.add=Add a new provider loader definition.
elytron-tls.provider-loader.remove=Remove a provider loader definition.
# Configuration Attributes
elytron-tls.provider-loader.module=The name of the module to load the provider from.
elytron-tls.provider-loader.class-names=The fully qualified class names of the providers to load, these are loaded after the service-loader discovered providers and duplicates will be skipped.
elytron-tls.provider-loader.path=The path of the file to use to initialise the providers.
elytron-tls.provider-loader.relative-to=The base path of the configuration file.
elytron-tls.provider-loader.argument=An argument to be passed into the constructor as the Provider is instantiated.
elytron-tls.provider-loader.configuration=The key/value configuration to be passed to the Provider to initialise it.
# Runtime Attributes
elytron-tls.provider-loader.loaded-providers=The list of providers loaded by this provider loader.
elytron-tls.provider-loader.loaded-providers.name=The name reported by the provider instance.
elytron-tls.provider-loader.loaded-providers.info=The information reported by the provider instance.
elytron-tls.provider-loader.loaded-providers.version=The version reported by the provider instance.
elytron-tls.provider-loader.loaded-providers.services=List of services available from this provider.
elytron-tls.provider-loader.loaded-providers.type=The service type.
elytron-tls.provider-loader.loaded-providers.algorithm=The algorithm supported by the service.
elytron-tls.provider-loader.loaded-providers.class-name=The class name of the implementation of the service SPI.

####################################
#expression Resolver (Encryption) #
####################################

elytron-tls.expression=Definition of an expression resolver to decrypt encrypted expressions.
elytron-tls.expression.encryption=Definition of an expression resolver to decrypt encrypted expressions.
# Operations
elytron-tls.expression.encryption.add=Add operation for the expression resolver.
elytron-tls.expression.encryption.remove=Remove operation for the expression resolver.
elytron-tls.expression.encryption.create-expression=Operation to encrypt the supplied clear text using the specified resolver and return a usable expression.
elytron-tls.expression.encryption.create-expression.resolver=The resolver configuration to use to encrypt the clear text.  If omitted the default-resolver will be used instead.
elytron-tls.expression.encryption.create-expression.clear-text=The clear text value to encrypt.

# Attributes
elytron-tls.expression.encryption.resolvers=List of expressions resolver definitions.
elytron-tls.expression.encryption.resolvers.name=The name of the expression resolver definition.
elytron-tls.expression.encryption.resolvers.credential-store=Reference to the credential store to be used by this resolver.
elytron-tls.expression.encryption.resolvers.secret-key=The alias of the SecretKey within the credential store to use for encryption.
elytron-tls.expression.encryption.default-resolver=The default expression resolver to use if not specified within the expression.  If not set there is no default.
elytron-tls.expression.encryption.prefix=The prefix in use for encrypted expressions.


#####################
# Credential Stores #
#####################

# Original credential-store
elytron-tls.credential-store=Credential store to keep alias for sensitive information such as passwords for external services.
elytron-tls.credential-store.name=Name of the credential store.
elytron-tls.credential-store.type=The credential store type, e.g. KeyStoreCredentialStore.
elytron-tls.credential-store.credential-reference=Credential reference to be used to create protection parameter.
elytron-tls.credential-store.credential-reference.store=The name of the credential store holding the alias to credential.
elytron-tls.credential-store.credential-reference.alias=The alias which denotes stored secret or credential in the store.
elytron-tls.credential-store.credential-reference.type=The type of credential this reference is denoting.
elytron-tls.credential-store.credential-reference.clear-text=Secret specified using clear text. Check credential store way of supplying credential/secrets to services.
elytron-tls.credential-store.loaded-provider=Information about the provider that loaded implementation of this credential store type.
elytron-tls.credential-store.loaded-provider.name=The name of the provider loader.
elytron-tls.credential-store.loaded-provider.info=The information string about the provider loader.
elytron-tls.credential-store.loaded-provider.version=The version of the provider used to load the credential store.
elytron-tls.credential-store.providers=The name of the providers defined within the subsystem to obtain the Providers to search for the one that can create the required CredentialStore type. If this is not specified then the global list of Providers is used instead.
elytron-tls.credential-store.other-providers=The name of the providers defined within the subsystem to obtain the Providers to search for the one that can create the required Jakarta Connectors objects within credential store. This is valid only for key-store based CredentialStore. If this is not specified then the global list of Providers is used instead.
elytron-tls.credential-store.provider-name=The name of the provider to use to instantiate the CredentialStoreSpi. If the provider is not specified then the first provider found that can create an instance of the specified 'type' will be used.
elytron-tls.credential-store.implementation-properties=Map of credentials store implementation specific properties.
elytron-tls.credential-store.path=File name of credential store storage.
elytron-tls.credential-store.location=File name of credential store storage.
elytron-tls.credential-store.location.deprecated=Use the 'path' attribute instead.
elytron-tls.credential-store.modifiable=Specifies whether credential store is modifiable.
elytron-tls.credential-store.create=Specifies whether credential store should create storage when it does not exist.
elytron-tls.credential-store.relative-to=A reference to a previously defined path that the file name is relative to.
elytron-tls.credential-store.add=Add another credential store to the configuration.
elytron-tls.credential-store.remove=Remove credential store from the configuration.
elytron-tls.credential-store.reload=Reload credential store (reinitialize and load new data if present).
elytron-tls.credential-store.state=The state of the underlying service that represents this credential store at runtime.

# secret-key-credential-store
elytron-tls.secret-key-credential-store=A simple credential store to manage secret keys store clearly.
# Attributes
elytron-tls.secret-key-credential-store.relative-to=A reference to a previously defined path that the path is relative to.
elytron-tls.secret-key-credential-store.path=The path to the credential store.
elytron-tls.secret-key-credential-store.create=If the credential store does not exist should it be dynamically created?
elytron-tls.secret-key-credential-store.populate=If the credential store does not contain the default-alias should it be dynamically added?
elytron-tls.secret-key-credential-store.key-size=The default size for any generated keys.
elytron-tls.secret-key-credential-store.default-alias=The alias name of any key generated by default.
elytron-tls.secret-key-credential-store.state=The state of the credential store service.
# Operations
elytron-tls.secret-key-credential-store.add=The add operation for the credential store.
elytron-tls.secret-key-credential-store.remove=The remove operation for the credential store.

# Operations For Credential Stores
elytron-tls.credential-store.operations.add-alias=Add an alias to the credential store.
elytron-tls.credential-store.operations.add-alias.alias=The alias of the credential store item to add.
elytron-tls.credential-store.operations.add-alias.entry-type=Type of a credential (entry) stored in the credential store.
elytron-tls.credential-store.operations.add-alias.secret-value=Secret value such as a password.
elytron-tls.credential-store.operations.reload=Reload credential store (reinitialize and load new data if present).
elytron-tls.credential-store.operations.read-aliases=Read aliases (entries) from a credential store.
elytron-tls.credential-store.operations.remove-alias=Remove a credential (entry) stored in the credential store.
elytron-tls.credential-store.operations.remove-alias.alias=The alias of the credential store item to remove.
elytron-tls.credential-store.operations.remove-alias.entry-type=The type of the credential to remove.
elytron-tls.credential-store.operations.set-secret=Set the secret value of a credential (entry) stored in the credential store.
elytron-tls.credential-store.operations.set-secret.alias=The alias of the credential store item to set.
elytron-tls.credential-store.operations.set-secret.entry-type=Type of a credential (entry) stored in the credential store.
elytron-tls.credential-store.operations.set-secret.secret-value=Secret value such as a password.
elytron-tls.credential-store.operations.generate-secret-key=Generate a new SecretKey and store it in the credential store.
elytron-tls.credential-store.operations.generate-secret-key.alias=The alias to use when storing the new SecretKey.
elytron-tls.credential-store.operations.generate-secret-key.key-size=The size of key to generate (bits).
elytron-tls.credential-store.operations.export-secret-key=Export an existing SecretKey.
elytron-tls.credential-store.operations.export-secret-key.alias=The alias of the SecretKey to export.
elytron-tls.credential-store.operations.import-secret-key=Import a previously exported SecretKey and add it to the credential store.
elytron-tls.credential-store.operations.import-secret-key.alias=The alias to use when storing the imported SecretKey.
elytron-tls.credential-store.operations.import-secret-key.key=The previously exported key to import.


##################
# KeyStore #
##################

elytron-tls.key-store=A KeyStore definition.
# Operations
elytron-tls.key-store.add=Add a new KeyStore definition.
elytron-tls.key-store.remove=Remove the KeyStore definition.
elytron-tls.key-store.load=Load the KeyStore, if the KeyStore is file backed this will involve re-reading the contents of the file.
elytron-tls.key-store.store=Store the KeyStore to file, this operation will fail for any KeyStore instances not backed by a file.  If the file does not exist and it was not flagged as required it will be created.
# Configuration Attributes
elytron-tls.key-store.type=The type of the KeyStore, used when creating the new KeyStore instance.
elytron-tls.key-store.provider-name=The name of the provider to use to load the KeyStore, disables searching for the first Provider that can create a KeyStore of the specified type.
elytron-tls.key-store.credential-reference=The reference to credential stored in CredentialStore under defined alias or clear text password.
elytron-tls.key-store.credential-reference.store=The name of the credential store holding the alias to credential.
elytron-tls.key-store.credential-reference.alias=The alias which denotes stored secret or credential in the store.
elytron-tls.key-store.credential-reference.type=The type of credential this reference is denoting.
elytron-tls.key-store.credential-reference.clear-text=Secret specified using clear text. Check credential store way of supplying credential/secrets to services.
elytron-tls.key-store.relative-to=The base path this store is relative to.
elytron-tls.key-store.path=The path to the KeyStore file.
elytron-tls.key-store.required=Is the file required to exist at the time the KeyStore service starts?
elytron-tls.key-store.providers=A reference to the providers that should be used to obtain the list of Provider instances to search, if not specified the global list of providers will be used instead.
elytron-tls.key-store.alias-filter=A filter to apply to the aliases returned from the KeyStore, can either be a comma separated list of aliases to return or one of the following formats ALL:-alias1:-alias2, NONE:+alias1:+alias2
# Runtime Attributes
elytron-tls.key-store.state=The state of the underlying service that represents this KeyStore at runtime, if it is anything other than UP runtime operations will not be available.
elytron-tls.key-store.synchronized=The time this KeyStore was last loaded or saved. Note: Some providers may continue to apply updates after the KeyStore was loaded within the application server.
elytron-tls.key-store.modified=Indicates if the in-memory representation of the KeyStore has been changed since it was last loaded or stored.  Note: For some providers updates may be immediate without further load or store calls.
elytron-tls.key-store.loaded-provider=Information about the provider that was used for this KeyStore.
elytron-tls.key-store.loaded-provider.name=The name of the provider used to load the KeyStore.
elytron-tls.key-store.loaded-provider.info=The information string about the provider used to load the KeyStore.
elytron-tls.key-store.loaded-provider.version=The version of the provider used to load the KeyStore.
elytron-tls.key-store.size=The number of entries in the KeyStore.

elytron-tls.key-store.alias=An individual alias within the KeyStore.
elytron-tls.key-store.alias.remove=Immediately remove the alias from the KeyStore, the success of this operation will be dependent on the underlying KeyStore provider supporting removals.
elytron-tls.key-store.alias.creation-date=The creation date of the entry represented by this alias.
elytron-tls.key-store.alias.entry-type=The type of the entry for this alias. Note: Unrecognised types will be reported as 'Other'.

elytron-tls.key-store.alias.certificate=The certificate associated with the alias (Note: If the alias has a certificate chain this will always be undefined).
elytron-tls.key-store.alias.certificate-chain=The certificate chain associated with the alias.

elytron-tls.key-store.alias.certificate.type=The type of the certificate.
elytron-tls.key-store.alias.certificate.algorithm=The algorithm of the public key.
elytron-tls.key-store.alias.certificate.format=The format of the public key.
elytron-tls.key-store.alias.certificate.public-key=The encoded public key associated with the certificate.
elytron-tls.key-store.alias.certificate.sha-1-digest=The SHA-1 digest (finger print) of the certificate.
elytron-tls.key-store.alias.certificate.sha-256-digest=The SHA-256 digest (finger print) of the certificate.
elytron-tls.key-store.alias.certificate.encoded=The encoded value of the certificate.
elytron-tls.key-store.alias.certificate.subject=The subject from the certificate.
elytron-tls.key-store.alias.certificate.issuer=The issuer of the certificate.
elytron-tls.key-store.alias.certificate.not-before=The starting date and time the certificate is valid.
elytron-tls.key-store.alias.certificate.not-after=The expiration date and time of the certificate.
elytron-tls.key-store.alias.certificate.serial-number=The serial number of the certificate.
elytron-tls.key-store.alias.certificate.signature-algorithm=The algorithm used to generate the certificates signature.
elytron-tls.key-store.alias.certificate.signature=The signature of the certificate.
elytron-tls.key-store.alias.certificate.version=The certificate version.

elytron-tls.key-store.alias.certificate-chain.type=The type of the certificate.
elytron-tls.key-store.alias.certificate-chain.algorithm=The algorithm of the public key.
elytron-tls.key-store.alias.certificate-chain.format=The format of the public key.
elytron-tls.key-store.alias.certificate-chain.public-key=The encoded public key associated with the certificate.
elytron-tls.key-store.alias.certificate-chain.sha-1-digest=The SHA-1 digest (finger print) of the certificate.
elytron-tls.key-store.alias.certificate-chain.sha-256-digest=The SHA-256 digest (finger print) of the certificate.
elytron-tls.key-store.alias.certificate-chain.encoded=The encoded value of the certificate.
elytron-tls.key-store.alias.certificate-chain.subject=The subject from the certificate.
elytron-tls.key-store.alias.certificate-chain.issuer=The issuer of the certificate.
elytron-tls.key-store.alias.certificate-chain.not-before=The starting date and time the certificate is valid.
elytron-tls.key-store.alias.certificate-chain.not-after=The expiration date and time of the certificate.
elytron-tls.key-store.alias.certificate-chain.serial-number=The serial number of the certificate.
elytron-tls.key-store.alias.certificate-chain.signature-algorithm=The algorithm used to generate the certificates signature.
elytron-tls.key-store.alias.certificate-chain.signature=The signature of the certificate.
elytron-tls.key-store.alias.certificate-chain.version=The certificate version.

elytron-tls.modifiable-key-store.read-alias=Read an alias from a KeyStore.
elytron-tls.modifiable-key-store.read-alias.alias=The alias of the KeyStore item to read.
elytron-tls.modifiable-key-store.read-alias.verbose=Whether or not to include the public key and encoded form of a certificate in the output. The default value is true.
elytron-tls.modifiable-key-store.read-aliases=Read aliases from a KeyStore.
elytron-tls.modifiable-key-store.read-aliases.recursive=Include information about each alias in the KeyStore. The default value is false.
elytron-tls.modifiable-key-store.read-aliases.verbose=Whether or not to include the public key and encoded form of a certificate in the output. The default value is true.
elytron-tls.modifiable-key-store.remove-alias=Remove an alias from a KeyStore.
elytron-tls.modifiable-key-store.remove-alias.alias=The alias of the KeyStore item to remove.

elytron-tls.modifiable-key-store.generate-key-pair=Generate a key pair and wrap the resulting public key in a self-signed X.509 certificate. The generated private key and self-signed certificate will be added to the KeyStore.
elytron-tls.modifiable-key-store.generate-key-pair.alias=The alias of the new KeyStore entry.
elytron-tls.modifiable-key-store.generate-key-pair.algorithm=The algorithm to be used to generate the key pair.
elytron-tls.modifiable-key-store.generate-key-pair.key-size=The key size to use when generating the key pair.
elytron-tls.modifiable-key-store.generate-key-pair.signature-algorithm=The signature algorithm name to use when signing the self-signed certificate.
elytron-tls.modifiable-key-store.generate-key-pair.distinguished-name=The DN to use as both the subject DN and the issuer DN.
elytron-tls.modifiable-key-store.generate-key-pair.not-before=The starting date and time the self-signed certificate is valid.
elytron-tls.modifiable-key-store.generate-key-pair.validity=The number of days for which the self-signed certificate should be considered valid. The default value is 90 days.
elytron-tls.modifiable-key-store.generate-key-pair.extensions=The list of X.509 certificate extensions to include in the self-signed certificate.
elytron-tls.modifiable-key-store.generate-key-pair.credential-reference=The credential reference to be used to protect the generated private key.

elytron-tls.modifiable-key-store.generate-certificate-signing-request=Generate a PKCS #10 certificate signing request.
elytron-tls.modifiable-key-store.generate-certificate-signing-request.alias=The alias that identifies the PrivateKeyEntry to use to generate the certificate signing request.
elytron-tls.modifiable-key-store.generate-certificate-signing-request.signature-algorithm=The signature algorithm name to use when signing the certificate signing request.
elytron-tls.modifiable-key-store.generate-certificate-signing-request.distinguished-name=The DN to use in the certificate signing request. If not specified, the DN from the certificate will be used.
elytron-tls.modifiable-key-store.generate-certificate-signing-request.extensions=The list of X.509 certificate extensions to include in the certificate signing request.
elytron-tls.modifiable-key-store.generate-certificate-signing-request.credential-reference=The credential reference to be used to access the private key.
elytron-tls.modifiable-key-store.generate-certificate-signing-request.path=The path to the file where the certificate signing request should be stored.
elytron-tls.modifiable-key-store.generate-certificate-signing-request.relative-to=The base path of the certificate signing request file.

elytron-tls.modifiable-key-store.extensions.name=The name of the X.509 certificate extension.
elytron-tls.modifiable-key-store.extensions.critical=Specifies whether the X.509 certificate extension should be marked as critical. The default value is false.
elytron-tls.modifiable-key-store.extensions.value=The value of the X.509 certificate extension.
elytron-tls.modifiable-key-store.credential-reference.store=The name of the credential store holding the alias to the credential.
elytron-tls.modifiable-key-store.credential-reference.alias=The alias which denotes the stored secret or credential in the store.
elytron-tls.modifiable-key-store.credential-reference.type=The type of credential this reference is denoting.
elytron-tls.modifiable-key-store.credential-reference.clear-text=Secret specified using clear text.

elytron-tls.modifiable-key-store.import-certificate=Import a certificate or certificate chain from a file into a KeyStore entry.
elytron-tls.modifiable-key-store.import-certificate.alias=The alias that identifies the KeyStore entry.
elytron-tls.modifiable-key-store.import-certificate.credential-reference=The credential reference to be used to access the private key.
elytron-tls.modifiable-key-store.import-certificate.path=The path to the file that contains the certificate or certificate chain to import in binary encoding format or printable encoding format.
elytron-tls.modifiable-key-store.import-certificate.relative-to=The base path of the certificate file.
elytron-tls.modifiable-key-store.import-certificate.trust-cacerts=Specifies whether certificates from the cacerts file should be included when creating / validating the certificate chain.
elytron-tls.modifiable-key-store.import-certificate.validate=Specifies whether to validate that the top-most certificate is actually trusted when importing a certificate chain or whether to validate the certificate is actually trusted when importing a certificate. The default value is true. When this is set to true and validation fails, the certificate or certificate chain will not be imported into a KeyStore entry.

elytron-tls.modifiable-key-store.export-certificate=Export a certificate from a KeyStore entry to a file.
elytron-tls.modifiable-key-store.export-certificate.alias=The alias that identifies the KeyStore entry.
elytron-tls.modifiable-key-store.export-certificate.path=The path to the file to export the certificate to.
elytron-tls.modifiable-key-store.export-certificate.relative-to=The base path of the export file.
elytron-tls.modifiable-key-store.export-certificate.pem=Specifies whether to export the certificate in printable encoding format. If not specified, the certificate will be exported in binary encoding format.

elytron-tls.modifiable-key-store.change-alias=Move an existing KeyStore entry to a new alias.
elytron-tls.modifiable-key-store.change-alias.alias=The alias that identifies the existing KeyStore entry to move.
elytron-tls.modifiable-key-store.change-alias.new-alias=The new alias to use.
elytron-tls.modifiable-key-store.change-alias.credential-reference=The credential reference to be used to access the existing KeyStore entry, if needed.

elytron-tls.modifiable-key-store.obtain-certificate=Obtain a signed certificate from a certificate authority and store it in a KeyStore entry.
elytron-tls.modifiable-key-store.obtain-certificate.alias=The alias of the KeyStore entry.
elytron-tls.modifiable-key-store.obtain-certificate.domain-names=The list of DNS name(s) to request the certificate for.
elytron-tls.modifiable-key-store.obtain-certificate.certificate-authority-account=A reference to the certificate authority account information that should be used to obtain the certificate.
elytron-tls.modifiable-key-store.obtain-certificate.agree-to-terms-of-service=Indicates whether or not the user agrees to the certificate authority terms of service.
elytron-tls.modifiable-key-store.obtain-certificate.staging=Indicates whether or not the certificate authority staging URL should be used. This should only be set to true for testing purposes. This should never be set to true in a production environment.
elytron-tls.modifiable-key-store.obtain-certificate.algorithm=The algorithm to be used to generate the key pair. The default value is RSA.
elytron-tls.modifiable-key-store.obtain-certificate.key-size=The key size to use when generating the key pair. The default value is 2048.
elytron-tls.modifiable-key-store.obtain-certificate.credential-reference=The credential reference to be used to protect the generated private key.

elytron-tls.modifiable-key-store.revoke-certificate=Revoke a signed certificate.
elytron-tls.modifiable-key-store.revoke-certificate.alias=The alias that identifies the KeyStore entry that contains the certificate to be revoked.
elytron-tls.modifiable-key-store.revoke-certificate.reason=The reason for revocation.
elytron-tls.modifiable-key-store.revoke-certificate.certificate-authority-account=A reference to the certificate authority account information that should be uesd to revoke the certificate.
elytron-tls.modifiable-key-store.revoke-certificate.staging=Indicates whether or not the certificate authority staging URL should be used. This should only be set to true for testing purposes. This should never be set to true in a production environment.

elytron-tls.modifiable-key-store.should-renew-certificate=Check if a signed certificate is due for renewal.
elytron-tls.modifiable-key-store.should-renew-certificate.alias=The alias that identifies the KeyStore entry that contains the certificate to check.
elytron-tls.modifiable-key-store.should-renew-certificate.expiration=The number of days to expiry to be checked.


##################
# Managers #
##################

elytron-tls.key-manager=A key manager definition for creating the KeyManager as used to create an SSLContext.
#operations
elytron-tls.key-manager.add=Add the new key manager definition.
elytron-tls.key-manager.remove=Remove the key manager definition.
elytron-tls.key-manager.init=Reinitialize key manager.
# Attributes
elytron-tls.key-manager.algorithm=The name of the algorithm to use to create the underlying KeyManagerFactory.
elytron-tls.key-manager.providers=Reference to obtain the Provider[] to use when creating the underlying KeyManagerFactory.
elytron-tls.key-manager.provider-name=The name of the provider to use to create the underlying KeyManagerFactory.
elytron-tls.key-manager.credential-reference=The credential reference to decrypt KeyStore item. (Not a password of the KeyStore.)
elytron-tls.key-manager.credential-reference.store=The name of the credential store holding the alias to credential.
elytron-tls.key-manager.credential-reference.alias=The alias which denotes stored secret or credential in the store.
elytron-tls.key-manager.credential-reference.type=The type of credential this reference is denoting.
elytron-tls.key-manager.credential-reference.clear-text=The secret specified using clear text. Check credential store way of supplying credential/secrets to services.
elytron-tls.key-manager.alias-filter=A filter to apply to the aliases returned from the KeyStore, can either be a comma separated list of aliases to return or one of the following formats ALL:-alias1:-alias2, NONE:+alias1:+alias2
elytron-tls.key-manager.generate-self-signed-certificate-host=If the file that backs the KeyStore does not exist and this attribute is set, then a self-signed certificate will be generated for the specified host name. This is not intended for production use.

elytron-tls.key-manager.key-store=Reference to the KeyStore to use to initialise the underlying KeyManagerFactory.
#elytron-tls.key-manager.key-store-object=KeyStore object to use to initialise the underlying KeyManagerFactory.
#elytron-tls.key-manager.key-store-object.type=The type of the KeyStore, used when creating the new KeyStore instance.
#elytron-tls.key-manager.key-store-object.provider-name=The name of the provider to use to load the KeyStore, disables searching for the first Provider that can create a KeyStore of the specified type.
#elytron-tls.key-manager.key-store-object.credential-reference=The reference to credential stored in CredentialStore under defined alias or clear text password.
#elytron-tls.key-manager.key-store-object.credential-reference.store=The name of the credential store holding the alias to credential.
#elytron-tls.key-manager.key-store-object.credential-reference.alias=The alias which denotes stored secret or credential in the store.
#elytron-tls.key-manager.key-store-object.credential-reference.type=The type of credential this reference is denoting.
#elytron-tls.key-manager.key-store-object.credential-reference.clear-text=Secret specified using clear text. Check credential store way of supplying credential/secrets to services.
#elytron-tls.key-manager.key-store-object.relative-to=The base path this store is relative to.
#elytron-tls.key-manager.key-store-object.path=The path to the KeyStore file.
#elytron-tls.key-manager.key-store-object.required=Is the file required to exist at the time the KeyStore service starts?
#elytron-tls.key-manager.key-store-object.providers=A reference to the providers that should be used to obtain the list of Provider instances to search, if not specified the global list of providers will be used instead.
#elytron-tls.key-manager.key-store-object.alias-filter=A filter to apply to the aliases returned from the KeyStore, can either be a comma separated list of aliases to return or one of the following formats ALL:-alias1:-alias2, NONE:+alias1:+alias2

elytron-tls.trust-manager=A trust manager definition for creating the TrustManager[] as used to create an SSLContext.
#operations
elytron-tls.trust-manager.add=Add the new trust manager definition.
elytron-tls.trust-manager.remove=Remove the trust manager definition.
elytron-tls.trust-manager.init=Reinitialize trust manager.
# Attributes
elytron-tls.trust-manager.algorithm=The name of the algorithm to use to create the underlying TrustManagerFactory.
elytron-tls.trust-manager.providers=Reference to obtain the Provider[] to use when creating the underlying TrustManagerFactory.
elytron-tls.trust-manager.provider-name=The name of the provider to use to create the underlying TrustManagerFactory.
elytron-tls.trust-manager.alias-filter=A filter to apply to the aliases returned from the KeyStore, can either be a comma separated list of aliases to return or one of the following formats ALL:-alias1:-alias2, NONE:+alias1:+alias2
elytron-tls.trust-manager.maximum-cert-path=The maximum number of non-self-issued intermediate certificates that may exist in a certification path for OCSP and CRL checks. If neither OCSP and CRL is configured, this attribute has no effect.
elytron-tls.trust-manager.only-leaf-cert=Whether only leaf certificate should be checked for revocation status.
elytron-tls.trust-manager.soft-fail=Whether a certificate with unknown OCSP response should be accepted.
elytron-tls.trust-manager.certificate-revocation-list=Enables certificate revocation list checks to a trust manager.
elytron-tls.trust-manager.certificate-revocation-list.path=The path to the configuration to use to initialise the provider.
elytron-tls.trust-manager.certificate-revocation-list.relative-to=The base path of the certificate revocation list file.
elytron-tls.trust-manager.certificate-revocation-list.maximum-cert-path=The maximum number of non-self-issued intermediate certificates that may exist in a certification path.
elytron-tls.trust-manager.ocsp=Enables online certificate status protocol checks to a trust manager.
elytron-tls.trust-manager.ocsp.prefer-crls=Whether a certificate-revocation-list should be preferred over OCSP.
elytron-tls.trust-manager.ocsp.responder=The URL of OCSP responder to use. Keep undefined to use responder from the certificate.
elytron-tls.trust-manager.ocsp.responder-certificate=The alias for OCSP Responder certificate. Keep undefined to use the issuer of certificate in validation.
elytron-tls.trust-manager.ocsp.responder-keystore=Reference to the keystore for responder-certificate. Keep undefined to use trust-manager keystore. Requires responder-certificate to be defined.
#elytron-tls.trust-manager.ocsp.responder-keystore-object=Keystore object for responder-certificate. Keep undefined to use trust-manager keystore. Requires responder-certificate to be defined.
#elytron-tls.trust-manager.ocsp.responder-keystore-object.type=The type of the KeyStore, used when creating the new KeyStore instance.
#elytron-tls.trust-manager.ocsp.responder-keystore-object.provider-name=The name of the provider to use to load the KeyStore, disables searching for the first Provider that can create a KeyStore of the specified type.
#elytron-tls.trust-manager.ocsp.responder-keystore-object.credential-reference=The reference to credential stored in CredentialStore under defined alias or clear text password.
#elytron-tls.trust-manager.ocsp.responder-keystore-object.credential-reference.store=The name of the credential store holding the alias to credential.
#elytron-tls.trust-manager.ocsp.responder-keystore-object.credential-reference.alias=The alias which denotes stored secret or credential in the store.
#elytron-tls.trust-manager.ocsp.responder-keystore-object.credential-reference.type=The type of credential this reference is denoting.
#elytron-tls.trust-manager.ocsp.responder-keystore-object.credential-reference.clear-text=Secret specified using clear text. Check credential store way of supplying credential/secrets to services.
#elytron-tls.trust-manager.ocsp.responder-keystore-object.relative-to=The base path this store is relative to.
#elytron-tls.trust-manager.ocsp.responder-keystore-object.path=The path to the KeyStore file.
#elytron-tls.trust-manager.ocsp.responder-keystore-object.required=Is the file required to exist at the time the KeyStore service starts?
#elytron-tls.trust-manager.ocsp.responder-keystore-object.providers=A reference to the providers that should be used to obtain the list of Provider instances to search, if not specified the global list of providers will be used instead.
#elytron-tls.trust-manager.ocsp.responder-keystore-object.alias-filter=A filter to apply to the aliases returned from the KeyStore, can either be a comma separated list of aliases to return or one of the following formats ALL:-alias1:-alias2, NONE:+alias1:+alias2
elytron-tls.trust-manager.reload-certificate-revocation-list=Notify the trust manager in order to reload the certificate revocation list, if defined.
elytron-tls.trust-manager.certificate-revocation-lists=Enables certificate revocation list checks to a trust manager using multiple certificate revocation lists.
elytron-tls.trust-manager.certificate-revocation-lists.path=The path to the certificate revocation list.
elytron-tls.trust-manager.certificate-revocation-lists.relative-to=The base path of the certificate revocation list file.

elytron-tls.trust-manager.key-store=Reference to the KeyStore to use to initialise the underlying TrustManagerFactory.
#elytron-tls.trust-manager.key-store-object=KeyStore object to use to initialise the underlying TrustManagerFactory.
#elytron-tls.trust-manager.key-store-object.type=The type of the KeyStore, used when creating the new KeyStore instance.
#elytron-tls.trust-manager.key-store-object.provider-name=The name of the provider to use to load the KeyStore, disables searching for the first Provider that can create a KeyStore of the specified type.
#elytron-tls.trust-manager.key-store-object.credential-reference=The reference to credential stored in CredentialStore under defined alias or clear text password.
#elytron-tls.trust-manager.key-store-object.credential-reference.store=The name of the credential store holding the alias to credential.
#elytron-tls.trust-manager.key-store-object.credential-reference.alias=The alias which denotes stored secret or credential in the store.
#elytron-tls.trust-manager.key-store-object.credential-reference.type=The type of credential this reference is denoting.
#elytron-tls.trust-manager.key-store-object.credential-reference.clear-text=Secret specified using clear text. Check credential store way of supplying credential/secrets to services.
#elytron-tls.trust-manager.key-store-object.relative-to=The base path this store is relative to.
#elytron-tls.trust-manager.key-store-object.path=The path to the KeyStore file.
#elytron-tls.trust-manager.key-store-object.required=Is the file required to exist at the time the KeyStore service starts?
#elytron-tls.trust-manager.key-store-object.providers=A reference to the providers that should be used to obtain the list of Provider instances to search, if not specified the global list of providers will be used instead.
#elytron-tls.trust-manager.key-store-object.alias-filter=A filter to apply to the aliases returned from the KeyStore, can either be a comma separated list of aliases to return or one of the following formats ALL:-alias1:-alias2, NONE:+alias1:+alias2


##################
# Certificate Authorities #
##################

elytron-tls.certificate-authority=A certificate authority definition.
# Operations
elytron-tls.certificate-authority.add=Add a new certificate authority definition.
elytron-tls.certificate-authority.remove=Remove the certificate authority definition.
# Configuration Attributes
elytron-tls.certificate-authority.url=URL of the certificate authority.
elytron-tls.certificate-authority.staging-url=URL of the certificate authority to use in pre-production.

elytron-tls.certificate-authority-account=A certificate authority account definition.
# Operations
elytron-tls.certificate-authority-account.add=Add a new certificate authority account definition.
elytron-tls.certificate-authority-account.remove=Remove the certificate authority account definition.
elytron-tls.certificate-authority-account.create-account=Create an account with the certificate authority if one does not already exist.
elytron-tls.certificate-authority-account.create-account.agree-to-terms-of-service=Indicates whether or not the user agrees to the certificate authority terms of service.
elytron-tls.certificate-authority-account.create-account.staging=Indicates whether or not the certificate authority staging URL should be used. The default value is false. This should only be set to true for testing purposes. This should never be set to true in a production environment.
elytron-tls.certificate-authority-account.update-account=Update an account with the certificate authority.
elytron-tls.certificate-authority-account.update-account.agree-to-terms-of-service=Indicates whether or not the user agrees to the certificate authority terms of service.
elytron-tls.certificate-authority-account.update-account.staging=Indicates whether or not the certificate authority staging URL should be used. The default value is false. This should only be set to true for testing purposes. This should never be set to true in a production environment.
elytron-tls.certificate-authority-account.change-account-key=Change the key associated with this certificate authority account.
elytron-tls.certificate-authority-account.change-account-key.staging=Indicates whether or not the certificate authority staging URL should be used. The default value is false. This should only be set to true for testing purposes. This should never be set to true in a production environment.
elytron-tls.certificate-authority-account.deactivate-account=Deactivate this certificate authority account.
elytron-tls.certificate-authority-account.deactivate-account.staging=Indicates whether or not the certificate authority staging URL should be used. The default value is false. This should only be set to true for testing purposes. This should never be set to true in a production environment.
elytron-tls.certificate-authority-account.get-metadata=Get the metadata associated with the certificate authority.
elytron-tls.certificate-authority-account.get-metadata.staging=Indicates whether or not the certificate authority staging URL should be used. The default value is false. This should only be set to true for testing purposes. This should never be set to true in a production environment.

# Configuration Attributes
elytron-tls.certificate-authority-account.certificate-authority=The name of the certificate authority to use.
elytron-tls.certificate-authority-account.contact-urls=A list of URLs that the certificate authority can contact about any issues related to this account.
elytron-tls.certificate-authority-account.alias=The alias of certificate authority account key in the keystore. If the alias does not already exist in the keystore, a certificate authority account key will be automatically generated and stored as a PrivateKeyEntry under the alias.
elytron-tls.certificate-authority-account.credential-reference=Credential to be used when accessing the certificate authority account key.
elytron-tls.certificate-authority-account.credential-reference.store=The name of the credential store holding the alias to credential.
elytron-tls.certificate-authority-account.credential-reference.alias=The alias which denotes stored secret or credential in the store.
elytron-tls.certificate-authority-account.credential-reference.type=The type of credential this reference is denoting.
elytron-tls.certificate-authority-account.credential-reference.clear-text=Secret specified using clear text. Check credential store way of supplying credential/secrets to services.
elytron-tls.server-ssl-sni-context=A server side SNI Aware SSLContext that selects between an underlying context based on the provided SNI name
elytron-tls.server-ssl-sni-context.add=Adds a SNI context
elytron-tls.server-ssl-sni-context.remove=Removes a SNI context
elytron-tls.server-ssl-sni-context.default-ssl-context=The context to use if no SNI information is present, or if it does not match any mappings
elytron-tls.server-ssl-sni-context.host-context-map=A mapping between a server name and an SSContext

elytron-tls.certificate-authority-account.key-store=Reference to the keystore that contains the certificate authority account key.
#elytron-tls.certificate-authority-account.key-store-object=KeyStore object that contains the certificate authority account key.
#elytron-tls.certificate-authority-account.key-store-object.type=The type of the KeyStore, used when creating the new KeyStore instance.
#elytron-tls.certificate-authority-account.key-store-object.provider-name=The name of the provider to use to load the KeyStore, disables searching for the first Provider that can create a KeyStore of the specified type.
#elytron-tls.certificate-authority-account.key-store-object.credential-reference=The reference to credential stored in CredentialStore under defined alias or clear text password.
#elytron-tls.certificate-authority-account.key-store-object.credential-reference.store=The name of the credential store holding the alias to credential.
#elytron-tls.certificate-authority-account.key-store-object.credential-reference.alias=The alias which denotes stored secret or credential in the store.
#elytron-tls.certificate-authority-account.key-store-object.credential-reference.type=The type of credential this reference is denoting.
#elytron-tls.certificate-authority-account.key-store-object.credential-reference.clear-text=Secret specified using clear text. Check credential store way of supplying credential/secrets to services.
#elytron-tls.certificate-authority-account.key-store-object.relative-to=The base path this store is relative to.
#elytron-tls.certificate-authority-account.key-store-object.path=The path to the KeyStore file.
#elytron-tls.certificate-authority-account.key-store-object.required=Is the file required to exist at the time the KeyStore service starts?
#elytron-tls.certificate-authority-account.key-store-object.providers=A reference to the providers that should be used to obtain the list of Provider instances to search, if not specified the global list of providers will be used instead.
#elytron-tls.certificate-authority-account.key-store-object.alias-filter=A filter to apply to the aliases returned from the KeyStore, can either be a comma separated list of aliases to return or one of the following formats ALL:-alias1:-alias2, NONE:+alias1:+alias2

##################
# SSL Contexts #
##################

# TODO: enable creating objects for SSL contexts

elytron-tls.client-ssl-context=An SSLContext for use on the client side of a connection.
# operations
elytron-tls.client-ssl-context.add=Add the SSLContext definition.
elytron-tls.client-ssl-context.remove=Remove the SSLContext definition.
# Attributes
elytron-tls.client-ssl-context.cipher-suite-filter=The filter to apply to specify the enabled cipher suites for TLSv1.2 and below.
elytron-tls.client-ssl-context.cipher-suite-names=The filter to apply to specify the enabled cipher suites for TLSv1.3.
elytron-tls.client-ssl-context.protocols=The enabled protocols.
elytron-tls.client-ssl-context.use-cipher-suites-order=To honor local cipher suites preference.
elytron-tls.client-ssl-context.maximum-session-cache-size=The maximum number of SSL sessions in the cache. The default value -1 means use the JVM default value. Value zero means there is no limit.
elytron-tls.client-ssl-context.session-timeout=The timeout for SSL sessions, in seconds. The default value -1 means use the JVM default value. Value zero means there is no limit.
elytron-tls.client-ssl-context.key-manager=Reference to the key manager to use within the SSLContext.
#elytron-tls.client-ssl-context.key-manager-object=Key manager object to use within the SSLContext.
elytron-tls.client-ssl-context.key-refresh=Refresh KeyManager used by SSLContext.
elytron-tls.client-ssl-context.trust-manager=Reference to the trust manager to use within the SSLContext.
#elytron-tls.client-ssl-context.trust-manager-object=Trust manager object to use within the SSLContext.
elytron-tls.client-ssl-context.provider-name=The name of the provider to use. If not specified, all providers from providers will be passed to the SSLContext.
elytron-tls.client-ssl-context.providers=The name of the providers to obtain the Provider[] to use to load the SSLContext.

# Runtime Attributes
elytron-tls.client-ssl-context.active-session-count=The count of current active sessions.

elytron-tls.client-ssl-context.ssl-session=A currently established SSL session.
elytron-tls.client-ssl-context.ssl-session.application-buffer-size=The application buffer size as reported by the SSLSession.
elytron-tls.client-ssl-context.ssl-session.cipher-suite=The selected cipher suite as reported by the SSLSession.
elytron-tls.client-ssl-context.ssl-session.creation-time=The creation time as reported by the SSLSession.
elytron-tls.client-ssl-context.ssl-session.last-accessed-time=The last accessed time as reported by the SSLSession.
elytron-tls.client-ssl-context.ssl-session.local-principal=The local principal as reported by the SSLSession.
elytron-tls.client-ssl-context.ssl-session.packet-buffer-size=The packet buffer size as reported by the SSLSession.
elytron-tls.client-ssl-context.ssl-session.peer-host=The peer host as reported by the SSLSession.
elytron-tls.client-ssl-context.ssl-session.peer-port=The peer port as reported by the SSLSession.
elytron-tls.client-ssl-context.ssl-session.peer-principal=The peer principal as reported by the SSLSession.
elytron-tls.client-ssl-context.ssl-session.protocol=The protocol as reported by the SSLSession.
elytron-tls.client-ssl-context.ssl-session.valid=The validity of the session as reported by the SSLSession.

elytron-tls.client-ssl-context.ssl-session.local-certificates=The local certificates from the SSLSession.
elytron-tls.client-ssl-context.ssl-session.local-certificates.type=The type of the certificate.
elytron-tls.client-ssl-context.ssl-session.local-certificates.algorithm=The algorithm of the public key.
elytron-tls.client-ssl-context.ssl-session.local-certificates.format=The format of the public key.
elytron-tls.client-ssl-context.ssl-session.local-certificates.public-key=The encoded public key associated with the certificate.
elytron-tls.client-ssl-context.ssl-session.local-certificates.sha-1-digest=The SHA-1 digest (finger print) of the certificate.
elytron-tls.client-ssl-context.ssl-session.local-certificates.sha-256-digest=The SHA-256 digest (finger print) of the certificate.
elytron-tls.client-ssl-context.ssl-session.local-certificates.encoded=The encoded value of the certificate.
elytron-tls.client-ssl-context.ssl-session.local-certificates.subject=The subject from the certificate.
elytron-tls.client-ssl-context.ssl-session.local-certificates.issuer=The issuer of the certificate.
elytron-tls.client-ssl-context.ssl-session.local-certificates.not-before=The starting date and time the certificate is valid.
elytron-tls.client-ssl-context.ssl-session.local-certificates.not-after=The expiration date and time of the certificate.
elytron-tls.client-ssl-context.ssl-session.local-certificates.serial-number=The serial number of the certificate.
elytron-tls.client-ssl-context.ssl-session.local-certificates.signature-algorithm=The algorithm used to generate the certificates signature.
elytron-tls.client-ssl-context.ssl-session.local-certificates.signature=The signature of the certificate.
elytron-tls.client-ssl-context.ssl-session.local-certificates.version=The certificate version.

elytron-tls.client-ssl-context.ssl-session.peer-certificates=The peer certificates from the SSLSession.
elytron-tls.client-ssl-context.ssl-session.peer-certificates.type=The type of the certificate.
elytron-tls.client-ssl-context.ssl-session.peer-certificates.algorithm=The algorithm of the public key.
elytron-tls.client-ssl-context.ssl-session.peer-certificates.format=The format of the public key.
elytron-tls.client-ssl-context.ssl-session.peer-certificates.public-key=The encoded public key associated with the certificate.
elytron-tls.client-ssl-context.ssl-session.peer-certificates.sha-1-digest=The SHA-1 digest (finger print) of the certificate.
elytron-tls.client-ssl-context.ssl-session.peer-certificates.sha-256-digest=The SHA-256 digest (finger print) of the certificate.
elytron-tls.client-ssl-context.ssl-session.peer-certificates.encoded=The encoded value of the certificate.
elytron-tls.client-ssl-context.ssl-session.peer-certificates.subject=The subject from the certificate.
elytron-tls.client-ssl-context.ssl-session.peer-certificates.issuer=The issuer of the certificate.
elytron-tls.client-ssl-context.ssl-session.peer-certificates.not-before=The starting date and time the certificate is valid.
elytron-tls.client-ssl-context.ssl-session.peer-certificates.not-after=The expiration date and time of the certificate.
elytron-tls.client-ssl-context.ssl-session.peer-certificates.serial-number=The serial number of the certificate.
elytron-tls.client-ssl-context.ssl-session.peer-certificates.signature-algorithm=The algorithm used to generate the certificates signature.
elytron-tls.client-ssl-context.ssl-session.peer-certificates.signature=The signature of the certificate.
elytron-tls.client-ssl-context.ssl-session.peer-certificates.version=The certificate version.


elytron-tls.server-ssl-context=An SSLContext for use on the server side of a connection.
# operations
elytron-tls.server-ssl-context.add=Add the SSLContext definition.
elytron-tls.server-ssl-context.remove=Remove the SSLContext definition.
# Attributes
elytron-tls.server-ssl-context.security-domain=The security domain to use for authentication during SSL session establishment.
elytron-tls.server-ssl-context.cipher-suite-filter=The filter to apply to specify the enabled cipher suites for TLSv1.2 and below.
elytron-tls.server-ssl-context.cipher-suite-names=The filter to apply to specify the enabled cipher suites for TLSv1.3.
elytron-tls.server-ssl-context.protocols=The enabled protocols.
elytron-tls.server-ssl-context.want-client-auth=To request (but not to require) a client certificate on SSL handshake. If a security domain is referenced and supports X509 evidence, this will be set to true automatically. Ignored when need-client-auth is set.
elytron-tls.server-ssl-context.need-client-auth=To require a client certificate on SSL handshake. Connection without trusted client certificate (see trust-manager) will be rejected.
elytron-tls.server-ssl-context.authentication-optional=Rejecting of the client certificate by the security domain will not prevent the connection. Allows a fall through to use other authentication mechanisms (like form login) when the client certificate is rejected by security domain. Has an effect only when the security domain is set.
elytron-tls.server-ssl-context.use-cipher-suites-order=To honor local cipher suites preference.
elytron-tls.server-ssl-context.maximum-session-cache-size=The maximum number of SSL sessions in the cache. The default value -1 means use the JVM default value. Value zero means there is no limit.
elytron-tls.server-ssl-context.session-timeout=The timeout for SSL sessions, in seconds. The default value -1 means use the JVM default value. Value zero means there is no limit.
elytron-tls.server-ssl-context.wrap=Should the SSLEngine, SSLSocket, and SSLServerSocket instances returned be wrapped to protect against further modification.
elytron-tls.server-ssl-context.key-manager=Reference to the key manager to use within the SSLContext.
#elytron-tls.server-ssl-context.key-manager-object=Key manager object to use within the SSLContext.
elytron-tls.server-ssl-context.key-refresh=Refresh KeyManager used by SSLContext.
elytron-tls.server-ssl-context.trust-manager=Reference to the trust manager to use within the SSLContext.
#elytron-tls.server-ssl-context.trust-manager-object=Trust manager object to use within the SSLContext.
elytron-tls.server-ssl-context.pre-realm-principal-transformer=A principal transformer to apply before the realm is selected.
elytron-tls.server-ssl-context.post-realm-principal-transformer=A principal transformer to apply after the realm is selected.
elytron-tls.server-ssl-context.final-principal-transformer=A final principal transformer to apply for this mechanism realm.
elytron-tls.server-ssl-context.realm-mapper=The realm mapper to be used for SSL authentication.
elytron-tls.server-ssl-context.provider-name=The name of the provider to use. If not specified, all providers from providers will be passed to the SSLContext.
elytron-tls.server-ssl-context.providers=The name of the providers to obtain the Provider[] to use to load the SSLContext.
# Runtime Attributes
elytron-tls.server-ssl-context.active-session-count=The count of current active sessions.

elytron-tls.server-ssl-context.ssl-session=A currently established SSL session.
elytron-tls.server-ssl-context.ssl-session.application-buffer-size=The application buffer size as reported by the SSLSession.
elytron-tls.server-ssl-context.ssl-session.cipher-suite=The selected cipher suite as reported by the SSLSession.
elytron-tls.server-ssl-context.ssl-session.creation-time=The creation time as reported by the SSLSession.
elytron-tls.server-ssl-context.ssl-session.last-accessed-time=The last accessed time as reported by the SSLSession.
elytron-tls.server-ssl-context.ssl-session.local-principal=The local principal as reported by the SSLSession.
elytron-tls.server-ssl-context.ssl-session.packet-buffer-size=The packet buffer size as reported by the SSLSession.
elytron-tls.server-ssl-context.ssl-session.peer-host=The peer host as reported by the SSLSession.
elytron-tls.server-ssl-context.ssl-session.peer-port=The peer port as reported by the SSLSession.
elytron-tls.server-ssl-context.ssl-session.peer-principal=The peer principal as reported by the SSLSession.
elytron-tls.server-ssl-context.ssl-session.protocol=The protocol as reported by the SSLSession.
elytron-tls.server-ssl-context.ssl-session.valid=The validity of the session as reported by the SSLSession.

elytron-tls.server-ssl-context.ssl-session.local-certificates=The local certificates from the SSLSession.
elytron-tls.server-ssl-context.ssl-session.local-certificates.type=The type of the certificate.
elytron-tls.server-ssl-context.ssl-session.local-certificates.algorithm=The algorithm of the public key.
elytron-tls.server-ssl-context.ssl-session.local-certificates.format=The format of the public key.
elytron-tls.server-ssl-context.ssl-session.local-certificates.public-key=The encoded public key associated with the certificate.
elytron-tls.server-ssl-context.ssl-session.local-certificates.sha-1-digest=The SHA-1 digest (finger print) of the certificate.
elytron-tls.server-ssl-context.ssl-session.local-certificates.sha-256-digest=The SHA-256 digest (finger print) of the certificate.
elytron-tls.server-ssl-context.ssl-session.local-certificates.encoded=The encoded value of the certificate.
elytron-tls.server-ssl-context.ssl-session.local-certificates.subject=The subject from the certificate.
elytron-tls.server-ssl-context.ssl-session.local-certificates.issuer=The issuer of the certificate.
elytron-tls.server-ssl-context.ssl-session.local-certificates.not-before=The starting date and time the certificate is valid.
elytron-tls.server-ssl-context.ssl-session.local-certificates.not-after=The expiration date and time of the certificate.
elytron-tls.server-ssl-context.ssl-session.local-certificates.serial-number=The serial number of the certificate.
elytron-tls.server-ssl-context.ssl-session.local-certificates.signature-algorithm=The algorithm used to generate the certificates signature.
elytron-tls.server-ssl-context.ssl-session.local-certificates.signature=The signature of the certificate.
elytron-tls.server-ssl-context.ssl-session.local-certificates.version=The certificate version.

elytron-tls.server-ssl-context.ssl-session.peer-certificates=The peer certificates from the SSLSession.
elytron-tls.server-ssl-context.ssl-session.peer-certificates.type=The type of the certificate.
elytron-tls.server-ssl-context.ssl-session.peer-certificates.algorithm=The algorithm of the public key.
elytron-tls.server-ssl-context.ssl-session.peer-certificates.format=The format of the public key.
elytron-tls.server-ssl-context.ssl-session.peer-certificates.public-key=The encoded public key associated with the certificate.
elytron-tls.server-ssl-context.ssl-session.peer-certificates.sha-1-digest=The SHA-1 digest (finger print) of the certificate.
elytron-tls.server-ssl-context.ssl-session.peer-certificates.sha-256-digest=The SHA-256 digest (finger print) of the certificate.
elytron-tls.server-ssl-context.ssl-session.peer-certificates.encoded=The encoded value of the certificate.
elytron-tls.server-ssl-context.ssl-session.peer-certificates.subject=The subject from the certificate.
elytron-tls.server-ssl-context.ssl-session.peer-certificates.issuer=The issuer of the certificate.
elytron-tls.server-ssl-context.ssl-session.peer-certificates.not-before=The starting date and time the certificate is valid.
elytron-tls.server-ssl-context.ssl-session.peer-certificates.not-after=The expiration date and time of the certificate.
elytron-tls.server-ssl-context.ssl-session.peer-certificates.serial-number=The serial number of the certificate.
elytron-tls.server-ssl-context.ssl-session.peer-certificates.signature-algorithm=The algorithm used to generate the certificates signature.
elytron-tls.server-ssl-context.ssl-session.peer-certificates.signature=The signature of the certificate.
elytron-tls.server-ssl-context.ssl-session.peer-certificates.version=The certificate version.

# Operations
elytron-tls.server-ssl-context.ssl-session.invalidate=Invalidate the SSLSession (Note: This does not terminate current connections, only prevents future connections from joining or resuming this session).
